{"version":3,"sources":["visualiser.js","App.js","index.js"],"names":["MAX_LEN","DELAY","ACCESSED_COLOUR","SORTED_COLOUR","NORMAL_COLOUR","useStyles","makeStyles","root","width","margin","input","shuffle","arr","i","length","randomIndex","Math","floor","random","temp","Visualiser","classes","React","useState","value","setValue","isSorting","setIsSorting","isSorted","setIsSorted","setArr","containerRef","useRef","swaps","initialiseArray","resetArrayColour","push","arrayBars","current","children","style","backgroundColor","modMergeSort","newArr","head","threshold","half","left","slice","right","j","tmp","animateArraySwap","pos","shift","animateArrayMerge","S","setTimeout","prevArr","cp","sorted","after","concat","max","i1","i2","useEffect","className","ref","map","barHeight","index","height","onClick","console","log","arrayBarStyle","animateSortedArray","Grid","container","spacing","alignItems","item","xs","Slider","onChange","event","newValue","aria-labelledby","min","Input","target","Number","onBlur","inputProps","step","MIN_LEN","type","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1b88479.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Input from '@material-ui/core/Input';\r\nimport './visualiser.css';\r\nimport SelectInput from '@material-ui/core/Select/SelectInput';\r\n\r\nconst MAX_LEN = 2000;\r\nconst MIN_LEN = 10;\r\nconst DELAY = 15;\r\nconst ACCESSED_COLOUR = 'turquoise';\r\nconst SORTED_COLOUR = 'green';\r\nconst NORMAL_COLOUR = 'blueviolet';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"auto\",\r\n    margin: \"2em\"\r\n  },\r\n  input: {\r\n    width: \"auto\",\r\n    margin: \"2em\"\r\n  },\r\n});\r\n\r\nfunction Visualiser() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(MIN_LEN);\r\n  const [isSorting, setIsSorting] = React.useState(false);\r\n  const [isSorted, setIsSorted] = React.useState(false);\r\n  const [arr, setArr] = React.useState([]);\r\n  // const [swaps, setSwaps] = React.useState(0);\r\n  const containerRef = React.useRef();\r\n\r\n  var swaps=0;\r\n\r\n  useEffect(initialiseArray, [value])\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    if (value < 0) {\r\n      setValue(0);\r\n    } else if (value > MAX_LEN) {\r\n      setValue(MAX_LEN);\r\n    }\r\n  };\r\n\r\n  function initialiseArray() {\r\n    if (isSorting) return;\r\n    if (isSorted) resetArrayColour();\r\n    setIsSorted(false);\r\n    const arr = [];\r\n    for (let i = 0; i < value; i++) {\r\n      arr.push(((i+1)/value) * 70);\r\n    }\r\n    shuffle(arr);\r\n    setArr(arr);\r\n    swaps=2;\r\n  }\r\n\r\n  function resetArrayColour() {\r\n    const arrayBars = containerRef.current.children;\r\n    for (let i = 0; i < arr.length; i++) {\r\n      const arrayBarStyle = arrayBars[i].style;\r\n      arrayBarStyle.backgroundColor = '';\r\n    }\r\n  }\r\n\r\n  function insertionSort() {\r\n    setIsSorting(true)\r\n    const newArr = [...arr]\r\n    for (let i=0; i<arr.length; i++) {\r\n      for (let j=i; j>0; j--) {\r\n        if (newArr[j] < newArr[j-1]) {\r\n          const tmp = newArr[j]\r\n          newArr[j] = newArr[j-1]\r\n          newArr[j-1] = tmp\r\n          swaps++\r\n          animateArraySwap(j, j-1, swaps*2)\r\n        } else {\r\n          break\r\n        }\r\n      }\r\n    }\r\n    console.log(newArr)\r\n    // animateArrayUpdate(animations);\r\n    setTimeout(() => {\r\n      animateSortedArray()\r\n    }, DELAY*3*swaps);\r\n    setIsSorting(false)\r\n  }\r\n\r\n  function modMergeSort(newArr, head, threshold=1) {\r\n    const half = Math.floor(newArr.length/2)\r\n    let left = newArr.slice(0, half)\r\n    let right = newArr.slice(half)\r\n    setIsSorting(true)\r\n    if (newArr.length <= threshold) {\r\n      for (let i = 0; i < arr.length; i++) {\r\n        for (let j = i; j > 0; j--) {\r\n          if (newArr[j] < newArr[j - 1]) {\r\n            const tmp = newArr[j]\r\n            newArr[j] = newArr[j - 1]\r\n            newArr[j - 1] = tmp\r\n            swaps++\r\n            animateArraySwap(head + j, head + j - 1, swaps*2)\r\n          } else {\r\n            break\r\n          }\r\n        }\r\n      }\r\n      return newArr\r\n    } else {\r\n      left = modMergeSort(left, head, threshold)\r\n      right = modMergeSort(right, head + half, threshold)\r\n    }\r\n\r\n    let pos = 0;\r\n\r\n    while ((left.length + right.length) > 0) {\r\n      if (left.length === 0) {\r\n        newArr[pos] = right.shift()\r\n      } else if (right.length === 0) {\r\n        newArr[pos] = left.shift()\r\n      } else if (left[0] < right[0]) {\r\n        newArr[pos] = left.shift()\r\n      } else {\r\n        newArr[pos] = right.shift()\r\n      }\r\n      swaps++\r\n      animateArrayMerge(head, newArr.slice(0, pos+1), [...left], [...right], swaps*2)\r\n\r\n      pos += 1\r\n    }\r\n\r\n    return newArr\r\n  }\r\n\r\n  function mergeSort() {\r\n    if (isSorting) {\r\n      return\r\n    }\r\n    swaps = 0\r\n    const sorted = modMergeSort([...arr], 0)\r\n    console.log(sorted)\r\n    setIsSorting(false)\r\n  }\r\n\r\n  function hybridSort(threshold) {\r\n    if (isSorting) {\r\n      return\r\n    }\r\n    swaps = 0\r\n    const sorted = modMergeSort([...arr], 0, 12)\r\n    console.log(sorted)\r\n    setIsSorting(false)\r\n  }\r\n\r\n  // function animateArrayMerge(sortedLen, leftLen, rightLen, choice, delFactor=0, l, r) {\r\n  function animateArrayMerge(head, newArr, left, right, S) {\r\n    const arrayBars = containerRef.current.children;\r\n    setTimeout(() => {\r\n      setArr((prevArr) => {\r\n        let cp = [...prevArr]\r\n        let sorted = cp.slice(0, head)\r\n        let after = cp.slice(head + newArr.length + left.length + right.length)\r\n        cp = sorted.concat(newArr, left, right, after)\r\n        return cp\r\n      })\r\n      arrayBars[Math.max(head + newArr.length-1, 0)].style.backgroundColor = ACCESSED_COLOUR;\r\n    }, DELAY*S)\r\n    setTimeout(() => {\r\n      arrayBars[Math.max(head + newArr.length - 1, 0)].style.backgroundColor = NORMAL_COLOUR;\r\n    }, DELAY*(S+1))\r\n  }\r\n\r\n  function animateArraySwap(i1, i2, S) {\r\n    const arrayBars = containerRef.current.children;\r\n    setTimeout(() => {\r\n      setArr((prevArr) => {\r\n        let cp = [...prevArr]\r\n        let tmp = cp[i1]\r\n        cp[i1] = cp[i2]\r\n        cp[i2] = tmp\r\n        return cp\r\n      })\r\n      arrayBars[i1].style.backgroundColor = ACCESSED_COLOUR;\r\n      arrayBars[i2].style.backgroundColor = ACCESSED_COLOUR;\r\n    }, DELAY*S);\r\n    setTimeout(() => {\r\n      arrayBars[i1].style.backgroundColor = NORMAL_COLOUR\r\n      arrayBars[i2].style.backgroundColor = NORMAL_COLOUR\r\n    }, DELAY*(S + 1));\r\n  }\r\n\r\n  function animateArrayAccess(index) {\r\n    // console.log(containerRef)\r\n    // console.log(index)\r\n    const arrayBars = containerRef.current.children;\r\n    const arrayBarStyle = arrayBars[index].style;\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = ACCESSED_COLOUR;\r\n    }, DELAY);\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = '';\r\n    }, DELAY * 2);\r\n  }\r\n\r\n  function animateSortedArray() {\r\n    const arrayBars = containerRef.current.children;\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      const arrayBarStyle = arrayBars[i].style;\r\n      setTimeout(\r\n        () => (arrayBarStyle.backgroundColor = SORTED_COLOUR),\r\n        i * DELAY,\r\n      );\r\n    }\r\n    setTimeout(() => {\r\n      setIsSorted(true);\r\n      setIsSorting(false);\r\n    }, arrayBars.length * DELAY);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className=\"array-container\" ref={containerRef}>\r\n        {arr.map((barHeight, index) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            style={{\r\n              height: `${barHeight}vh`,\r\n              width: `${MAX_LEN / value}vw`,\r\n            }}\r\n            key={index}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n      <footer className=\"app-footer\">\r\n        <ul>\r\n          <li>\r\n            <button className=\"app-button\" onClick={initialiseArray}>\r\n              Create new array\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button className=\"app-button\" onClick={mergeSort}>\r\n              Merge sort\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button className=\"app-button\" onClick={insertionSort}>\r\n              Insertion sort\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button className=\"app-button\" onClick={hybridSort}>\r\n              Hybrid sort\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      </footer>\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item xs>\r\n          <Slider\r\n            value={typeof value === 'number' ? value : MIN_LEN}\r\n            onChange={handleSliderChange}\r\n            aria-labelledby=\"input-slider\"\r\n            min={MIN_LEN}\r\n            max={MAX_LEN}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Input\r\n            className={classes.input}\r\n            value={value}\r\n            margin=\"dense\"\r\n            onChange={handleInputChange}\r\n            onBlur={handleBlur}\r\n            inputProps={{\r\n              step: 10,\r\n              min: {MIN_LEN},\r\n              max: {MAX_LEN},\r\n              type: 'number',\r\n              'aria-labelledby': 'input-slider',\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst shuffle = (arr) => {\r\n  for (let i = arr.length - 1; i >= 0; i--) {\r\n    const randomIndex = Math.floor(Math.random() * (i + 1));\r\n    const temp = arr[i];\r\n    arr[i] = arr[randomIndex];\r\n    arr[randomIndex] = temp;\r\n  }\r\n};\r\n\r\nfunction sleep(milliseconds) {\r\n  const date = Date.now();\r\n  let currentDate = null;\r\n  do {\r\n    currentDate = Date.now();\r\n  } while (currentDate - date < milliseconds);\r\n}\r\n\r\nexport default Visualiser;","import './App.css';\r\nimport Visualiser from './visualiser.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        <h1>Group D</h1>\r\n      </div>\r\n      <Visualiser />\r\n      {/* <div className=\"rectangle\">\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}